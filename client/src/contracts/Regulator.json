{
  "contractName": "Regulator",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Verifier",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract Proposal",
          "name": "proposal",
          "type": "address"
        }
      ],
      "name": "requestProposal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "addIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Proposal",
          "name": "proposal",
          "type": "address"
        }
      ],
      "name": "request",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.1+commit.e6f7d5a4\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Verifier\",\"name\":\"_verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract Proposal\",\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"requestProposal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"addIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Proposal\",\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"request\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"register(bool)\":{\"details\":\"Requests linking of address to real world identity via zero knowledge proof.   * Returns a boolean value indicating whether the operation succeeded.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"request(address)\":{\"details\":\"Requests creation of new ISA. Proposal is compared to whitelist and legal contract emails are sent if valid   * Returns a boolean value and message indicating whether the operation succeeded and why.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{},\"notice\":\"A service which regulates the creation and transfer of Income Sharing Agreements\"}},\"settings\":{\"compilationTarget\":{\"/Users/FinnHarman/Google Drive/Computing Science/Individual Project/Code/ISA/contracts/Regulator.sol\":\"Regulator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/FinnHarman/Google Drive/Computing Science/Individual Project/Code/ISA/contracts/Proposal.sol\":{\"keccak256\":\"0x4a9295e9d095c97415489f2d99aa94c6275e27fad5bd189f64a461eed59588bd\",\"urls\":[\"bzz-raw://a7f37d60c77e8ce8ed23f47cd3c51899dd44d8df542deb2770c506c269cdfbd4\",\"dweb:/ipfs/QmaLvGh8QmumR2ih4rLJfAJo7Zafxiu3dXw1h7gCZxXnPn\"]},\"/Users/FinnHarman/Google Drive/Computing Science/Individual Project/Code/ISA/contracts/Regulator.sol\":{\"keccak256\":\"0x57604f050fcf5a42bb3dba25ce16bcb10647f02e391dbc6239eb77767287b519\",\"urls\":[\"bzz-raw://1a024965b24cbcb1305c56760ef130bfc0779e77e7c6792c3f6258ec7f8b75d1\",\"dweb:/ipfs/QmUXsV1mjUMiQ7sue4ZnctKwV6kxvAi3kDkNngVf9DAHPv\"]},\"/Users/FinnHarman/Google Drive/Computing Science/Individual Project/Code/ISA/contracts/Verifier.sol\":{\"keccak256\":\"0xdc902bfc651a8df1c0356b0e3bf0202f7403af26dbbf0a476f140e00f9c47fc4\",\"urls\":[\"bzz-raw://4736513f9f4c6895e8e26b2594ba8fead755d304cd69668499aaf694d5039bd6\",\"dweb:/ipfs/QmZipRKkLdpT6Ko4nAAzPULpmqN1cobAWyoGwj2vXS7DxU\"]},\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"urls\":[\"bzz-raw://840b14ce0315c47d49ba328f1f9fa7654ded1c9e1559e6c5e777a7b2dc28bf0a\",\"dweb:/ipfs/QmTLLabn4wcfGro9LEmUXUN2nwKqZSotXMvjDCLXEnLtZP\"]},\"openzeppelin-solidity/contracts/access/Ownable.sol\":{\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"urls\":[\"bzz-raw://8f9f711fb8d0d92aeea1c327e3845d13ca1fa8f142e47f8723cd5b3106fb29a3\",\"dweb:/ipfs/QmVQUReDW9f4zGqhizwHnyU8EntMs95tbASdqkGncnikba\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"urls\":[\"bzz-raw://2df142592d1dc267d9549049ee3317fa190d2f87eaa565f86ab05ec83f7ab8f5\",\"dweb:/ipfs/QmSkJtcfWo7c42KnL5hho6GFxK6HRNV91XABx1P7xDtfLV\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610b04380380610b048339818101604052602081101561003357600080fd5b8101908080519060200190929190505050600061005461013960201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610141565b600033905090565b6109b4806101506000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063261005f91461006757806327c78c4214610095578063715018a61461015d5780638da5cb5b14610167578063be123145146101b1578063f2fde38b146101f9575b600080fd5b6100936004803603602081101561007d57600080fd5b810190808035906020019092919050505061023d565b005b6100d7600480360360208110156100ab57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610360565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610121578082015181840152602081019050610106565b50505050905090810190601f16801561014e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6101656104b2565b005b61016f61063a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101df600480360360208110156101c757600080fd5b81019080803515159060200190929190505050610663565b604051808215151515815260200191505060405180910390f35b61023b6004803603602081101561020f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610720565b005b61024561092d565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610306576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6002600082815260200190815260200160002060009054906101000a900460ff161561033157600080fd5b60016002600083815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600060608273ffffffffffffffffffffffffffffffffffffffff16638a133dc86040518163ffffffff1660e01b815260040160206040518083038186803b1580156103aa57600080fd5b505afa1580156103be573d6000803e3d6000fd5b505050506040513d60208110156103d457600080fd5b810190808051906020019092919050505061040d57600060405180606001604052806023815260200161093660239139915091506104ad565b7fa7e13ea85cfb2c6bce92c3ebe721bbaed610c45fae5f0c16dc6b17fccc00256d83604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160016040518060400160405280601381526020017f50726f706f73616c207375636365737366756c00000000000000000000000000815250915091505b915091565b6104ba61092d565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461057b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636dcb52f7836040518263ffffffff1660e01b81526004018082151515158152602001915050602060405180830381600087803b1580156106de57600080fd5b505af11580156106f2573d6000803e3d6000fd5b505050506040513d602081101561070857600080fd5b81019080805190602001909291905050509050919050565b61072861092d565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806109596026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60003390509056fe426f74682070617274696573206d75737420616772656520746f2070726f706f73616c4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220734533e187ca84f76a075076c295271d9bd93a8fe20f8a16883aefe815b4f8f464736f6c63430006010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063261005f91461006757806327c78c4214610095578063715018a61461015d5780638da5cb5b14610167578063be123145146101b1578063f2fde38b146101f9575b600080fd5b6100936004803603602081101561007d57600080fd5b810190808035906020019092919050505061023d565b005b6100d7600480360360208110156100ab57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610360565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610121578082015181840152602081019050610106565b50505050905090810190601f16801561014e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6101656104b2565b005b61016f61063a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101df600480360360208110156101c757600080fd5b81019080803515159060200190929190505050610663565b604051808215151515815260200191505060405180910390f35b61023b6004803603602081101561020f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610720565b005b61024561092d565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610306576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6002600082815260200190815260200160002060009054906101000a900460ff161561033157600080fd5b60016002600083815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600060608273ffffffffffffffffffffffffffffffffffffffff16638a133dc86040518163ffffffff1660e01b815260040160206040518083038186803b1580156103aa57600080fd5b505afa1580156103be573d6000803e3d6000fd5b505050506040513d60208110156103d457600080fd5b810190808051906020019092919050505061040d57600060405180606001604052806023815260200161093660239139915091506104ad565b7fa7e13ea85cfb2c6bce92c3ebe721bbaed610c45fae5f0c16dc6b17fccc00256d83604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160016040518060400160405280601381526020017f50726f706f73616c207375636365737366756c00000000000000000000000000815250915091505b915091565b6104ba61092d565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461057b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636dcb52f7836040518263ffffffff1660e01b81526004018082151515158152602001915050602060405180830381600087803b1580156106de57600080fd5b505af11580156106f2573d6000803e3d6000fd5b505050506040513d602081101561070857600080fd5b81019080805190602001909291905050509050919050565b61072861092d565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806109596026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60003390509056fe426f74682070617274696573206d75737420616772656520746f2070726f706f73616c4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220734533e187ca84f76a075076c295271d9bd93a8fe20f8a16883aefe815b4f8f464736f6c63430006010033",
  "sourceMap": "239:1378:4:-:0;;;392:70;8:9:-1;5:2;;;30:1;27;20:12;5:2;392:70:4;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;392:70:4;;;;;;;;;;;;;;;;865:17:7;885:12;:10;;;:12;;:::i;:::-;865:32;;916:9;907:6;;:18;;;;;;;;;;;;;;;;;;973:9;940:43;;969:1;940:43;;;;;;;;;;;;831:159;448:9:4;437:8;;:20;;;;;;;;;;;;;;;;;;392:70;239:1378;;590:104:6;643:15;677:10;670:17;;590:104;:::o;239:1378:4:-;;;;;;;",
  "deployedSourceMap": "239:1378:4:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;239:1378:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;558:126;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;558:126:4;;;;;;;;;;;;;;;;;:::i;:::-;;1273:342;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1273:342:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1273:342:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1689:145:7;;;:::i;:::-;;1066:77;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;871:160:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;871:160:4;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1983:240:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1983:240:7;;;;;;;;;;;;;;;;;;;:::i;:::-;;558:126:4;1280:12:7;:10;:12::i;:::-;1270:22;;:6;;;;;;;;;;;:22;;;1262:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;625:14:4::1;:20;640:4;625:20;;;;;;;;;;;;;;;;;;;;;624:21;616:30;;;::::0;::::1;;675:4;652:14;:20;667:4;652:20;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;558:126:::0;:::o;1273:342::-;1324:4;1330:13;1356:8;:18;;;:20;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1356:20:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1356:20:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1356:20:4;;;;;;;;;;;;;;;;1351:260;;1394:5;1386:53;;;;;;;;;;;;;;;;;;;;;;;1351:260;1535:25;1551:8;1535:25;;;;;;;;;;;;;;;;;;;;;;1576:4;1568:36;;;;;;;;;;;;;;;;;;;;;1273:342;;;;:::o;1689:145:7:-;1280:12;:10;:12::i;:::-;1270:22;;:6;;;;;;;;;;;:22;;;1262:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1795:1:::1;1758:40;;1779:6;::::0;::::1;;;;;;;;;1758:40;;;;;;;;;;;;1825:1;1808:6:::0;::::1;:19;;;;;;;;;;;;;;;;;;1689:145::o:0;1066:77::-;1104:7;1130:6;;;;;;;;;;;1123:13;;1066:77;:::o;871:160:4:-;926:4;1000:8;;;;;;;;;;;:17;;;1018:7;1000:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1000:26:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1000:26:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1000:26:4;;;;;;;;;;;;;;;;993:33;;871:160;;;:::o;1983:240:7:-;1280:12;:10;:12::i;:::-;1270:22;;:6;;;;;;;;;;;:22;;;1262:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2091:1:::1;2071:22;;:8;:22;;;;2063:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2180:8;2151:38;;2172:6;::::0;::::1;;;;;;;;;2151:38;;;;;;;;;;;;2208:8;2199:6;::::0;:17:::1;;;;;;;;;;;;;;;;;;1983:240:::0;:::o;590:104:6:-;643:15;677:10;670:17;;590:104;:::o",
  "source": "pragma solidity >0.4.23 <0.7.0;\n\nimport \"openzeppelin-solidity/contracts/access/Ownable.sol\";\n\nimport \"./Proposal.sol\";\nimport \"./Verifier.sol\";\n\n/// @notice A service which regulates the creation and transfer of Income Sharing Agreements\ncontract Regulator is Ownable {\n\n  Verifier private verifier;\n  mapping(bytes32 => bool) validIdentites;\n\n  event requestProposal(Proposal proposal);\n\n  constructor(Verifier _verifier) public {\n    verifier = _verifier;\n  }\n\n  /*\n  * @dev allows the owner of the contract to add an eligible consumer detail hash\n  */\n  function addIdentity(bytes32 hash) public onlyOwner {\n    require(!validIdentites[hash]);\n    validIdentites[hash] = true;\n  }\n\n\n  /**\n   * @dev Requests linking of address to real world identity via zero knowledge\n   * proof.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   */\n  function register(\n    bool success\n  ) public returns(bool)\n  {\n    // Calls zero knowledge proof to verify identity\n    return verifier.verifyTx(success);\n  }\n\n  /**\n   * @dev Requests creation of new ISA. Proposal is compared to whitelist and\n   * legal contract emails are sent if valid\n   *\n   * Returns a boolean value and message indicating whether the operation\n   * succeeded and why.\n   */\n  function request(Proposal proposal) public returns(bool, string memory) {\n    if (!proposal.bothAgree()) {\n      return (false, \"Both parties must agree to proposal\");\n    } else {\n      // Access off-chain database and check validity of ISA proposal\n      emit requestProposal(proposal);\n      return (true, \"Proposal successful\");\n    }\n  }\n}\n",
  "sourcePath": "/Users/FinnHarman/Google Drive/Computing Science/Individual Project/Code/ISA/contracts/Regulator.sol",
  "ast": {
    "absolutePath": "/Users/FinnHarman/Google Drive/Computing Science/Individual Project/Code/ISA/contracts/Regulator.sol",
    "exportedSymbols": {
      "Regulator": [
        584
      ]
    },
    "id": 585,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 495,
        "literals": [
          "solidity",
          ">",
          "0.4",
          ".23",
          "<",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:4"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/access/Ownable.sol",
        "file": "openzeppelin-solidity/contracts/access/Ownable.sol",
        "id": 496,
        "nodeType": "ImportDirective",
        "scope": 585,
        "sourceUnit": 738,
        "src": "33:60:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/FinnHarman/Google Drive/Computing Science/Individual Project/Code/ISA/contracts/Proposal.sol",
        "file": "./Proposal.sol",
        "id": 497,
        "nodeType": "ImportDirective",
        "scope": 585,
        "sourceUnit": 494,
        "src": "95:24:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/FinnHarman/Google Drive/Computing Science/Individual Project/Code/ISA/contracts/Verifier.sol",
        "file": "./Verifier.sol",
        "id": 498,
        "nodeType": "ImportDirective",
        "scope": 585,
        "sourceUnit": 612,
        "src": "120:24:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 499,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 737,
              "src": "261:7:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$737",
                "typeString": "contract Ownable"
              }
            },
            "id": 500,
            "nodeType": "InheritanceSpecifier",
            "src": "261:7:4"
          }
        ],
        "contractDependencies": [
          634,
          737
        ],
        "contractKind": "contract",
        "documentation": "@notice A service which regulates the creation and transfer of Income Sharing Agreements",
        "fullyImplemented": true,
        "id": 584,
        "linearizedBaseContracts": [
          584,
          737,
          634
        ],
        "name": "Regulator",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 502,
            "name": "verifier",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 584,
            "src": "274:25:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Verifier_$611",
              "typeString": "contract Verifier"
            },
            "typeName": {
              "contractScope": null,
              "id": 501,
              "name": "Verifier",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 611,
              "src": "274:8:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Verifier_$611",
                "typeString": "contract Verifier"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 506,
            "name": "validIdentites",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 584,
            "src": "303:39:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
              "typeString": "mapping(bytes32 => bool)"
            },
            "typeName": {
              "id": 505,
              "keyType": {
                "id": 503,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "311:7:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "303:24:4",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                "typeString": "mapping(bytes32 => bool)"
              },
              "valueType": {
                "id": 504,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "322:4:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 510,
            "name": "requestProposal",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 509,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 508,
                  "indexed": false,
                  "name": "proposal",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 510,
                  "src": "369:17:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Proposal_$493",
                    "typeString": "contract Proposal"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 507,
                    "name": "Proposal",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 493,
                    "src": "369:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Proposal_$493",
                      "typeString": "contract Proposal"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "368:19:4"
            },
            "src": "347:41:4"
          },
          {
            "body": {
              "id": 519,
              "nodeType": "Block",
              "src": "431:31:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 517,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 515,
                      "name": "verifier",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 502,
                      "src": "437:8:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Verifier_$611",
                        "typeString": "contract Verifier"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 516,
                      "name": "_verifier",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 512,
                      "src": "448:9:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Verifier_$611",
                        "typeString": "contract Verifier"
                      }
                    },
                    "src": "437:20:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Verifier_$611",
                      "typeString": "contract Verifier"
                    }
                  },
                  "id": 518,
                  "nodeType": "ExpressionStatement",
                  "src": "437:20:4"
                }
              ]
            },
            "documentation": null,
            "id": 520,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 513,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 512,
                  "name": "_verifier",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 520,
                  "src": "404:18:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Verifier_$611",
                    "typeString": "contract Verifier"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 511,
                    "name": "Verifier",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 611,
                    "src": "404:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Verifier_$611",
                      "typeString": "contract Verifier"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "403:20:4"
            },
            "returnParameters": {
              "id": 514,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "431:0:4"
            },
            "scope": 584,
            "src": "392:70:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 540,
              "nodeType": "Block",
              "src": "610:74:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 531,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "624:21:4",
                        "subExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 528,
                            "name": "validIdentites",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 506,
                            "src": "625:14:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                              "typeString": "mapping(bytes32 => bool)"
                            }
                          },
                          "id": 530,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 529,
                            "name": "hash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 522,
                            "src": "640:4:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "625:20:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 527,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1011,
                        1012
                      ],
                      "referencedDeclaration": 1011,
                      "src": "616:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 532,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "616:30:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 533,
                  "nodeType": "ExpressionStatement",
                  "src": "616:30:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 538,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 534,
                        "name": "validIdentites",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 506,
                        "src": "652:14:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                          "typeString": "mapping(bytes32 => bool)"
                        }
                      },
                      "id": 536,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 535,
                        "name": "hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 522,
                        "src": "667:4:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "652:20:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 537,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "675:4:4",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "652:27:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 539,
                  "nodeType": "ExpressionStatement",
                  "src": "652:27:4"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "261005f9",
            "id": 541,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 525,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 524,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 688,
                  "src": "600:9:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "600:9:4"
              }
            ],
            "name": "addIdentity",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 523,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 522,
                  "name": "hash",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 541,
                  "src": "579:12:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 521,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "579:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "578:14:4"
            },
            "returnParameters": {
              "id": 526,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "610:0:4"
            },
            "scope": 584,
            "src": "558:126:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 553,
              "nodeType": "Block",
              "src": "934:97:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 550,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 543,
                        "src": "1018:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 548,
                        "name": "verifier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 502,
                        "src": "1000:8:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Verifier_$611",
                          "typeString": "contract Verifier"
                        }
                      },
                      "id": 549,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "verifyTx",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 610,
                      "src": "1000:17:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_bool_$returns$_t_bool_$",
                        "typeString": "function (bool) external returns (bool)"
                      }
                    },
                    "id": 551,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1000:26:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 547,
                  "id": 552,
                  "nodeType": "Return",
                  "src": "993:33:4"
                }
              ]
            },
            "documentation": "@dev Requests linking of address to real world identity via zero knowledge\nproof.\n   * Returns a boolean value indicating whether the operation succeeded.",
            "functionSelector": "be123145",
            "id": 554,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "register",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 544,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 543,
                  "name": "success",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 554,
                  "src": "894:12:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 542,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "894:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "888:22:4"
            },
            "returnParameters": {
              "id": 547,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 546,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 554,
                  "src": "926:4:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 545,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "926:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "925:6:4"
            },
            "scope": 584,
            "src": "871:160:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 582,
              "nodeType": "Block",
              "src": "1345:270:4",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "id": 566,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "1355:21:4",
                    "subExpression": {
                      "argumentTypes": null,
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "expression": {
                          "argumentTypes": null,
                          "id": 563,
                          "name": "proposal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 556,
                          "src": "1356:8:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Proposal_$493",
                            "typeString": "contract Proposal"
                          }
                        },
                        "id": 564,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "bothAgree",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 333,
                        "src": "1356:18:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$__$returns$_t_bool_$",
                          "typeString": "function () view external returns (bool)"
                        }
                      },
                      "id": 565,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1356:20:4",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 580,
                    "nodeType": "Block",
                    "src": "1452:159:4",
                    "statements": [
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 573,
                              "name": "proposal",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 556,
                              "src": "1551:8:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Proposal_$493",
                                "typeString": "contract Proposal"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_Proposal_$493",
                                "typeString": "contract Proposal"
                              }
                            ],
                            "id": 572,
                            "name": "requestProposal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 510,
                            "src": "1535:15:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_contract$_Proposal_$493_$returns$__$",
                              "typeString": "function (contract Proposal)"
                            }
                          },
                          "id": 574,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1535:25:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 575,
                        "nodeType": "EmitStatement",
                        "src": "1530:30:4"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "hexValue": "74727565",
                              "id": 576,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1576:4:4",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "true"
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "50726f706f73616c207375636365737366756c",
                              "id": 577,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1582:21:4",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_e538b145d3f907d7f6c001efc47c2e295d304e81252b274a5144fd2df9f7cb73",
                                "typeString": "literal_string \"Proposal successful\""
                              },
                              "value": "Proposal successful"
                            }
                          ],
                          "id": 578,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1575:29:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_stringliteral_e538b145d3f907d7f6c001efc47c2e295d304e81252b274a5144fd2df9f7cb73_$",
                            "typeString": "tuple(bool,literal_string \"Proposal successful\")"
                          }
                        },
                        "functionReturnParameters": 562,
                        "id": 579,
                        "nodeType": "Return",
                        "src": "1568:36:4"
                      }
                    ]
                  },
                  "id": 581,
                  "nodeType": "IfStatement",
                  "src": "1351:260:4",
                  "trueBody": {
                    "id": 571,
                    "nodeType": "Block",
                    "src": "1378:68:4",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "hexValue": "66616c7365",
                              "id": 567,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1394:5:4",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "426f74682070617274696573206d75737420616772656520746f2070726f706f73616c",
                              "id": 568,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1401:37:4",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_09ca7baf9315f7f28c1faa4f9c9c06a537d896fcb77ce6bc04c76aa64bbd8957",
                                "typeString": "literal_string \"Both parties must agree to proposal\""
                              },
                              "value": "Both parties must agree to proposal"
                            }
                          ],
                          "id": 569,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1393:46:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_stringliteral_09ca7baf9315f7f28c1faa4f9c9c06a537d896fcb77ce6bc04c76aa64bbd8957_$",
                            "typeString": "tuple(bool,literal_string \"Both parties must agree to proposal\")"
                          }
                        },
                        "functionReturnParameters": 562,
                        "id": 570,
                        "nodeType": "Return",
                        "src": "1386:53:4"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": "@dev Requests creation of new ISA. Proposal is compared to whitelist and\nlegal contract emails are sent if valid\n   * Returns a boolean value and message indicating whether the operation\nsucceeded and why.",
            "functionSelector": "27c78c42",
            "id": 583,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "request",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 557,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 556,
                  "name": "proposal",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 583,
                  "src": "1290:17:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Proposal_$493",
                    "typeString": "contract Proposal"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 555,
                    "name": "Proposal",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 493,
                    "src": "1290:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Proposal_$493",
                      "typeString": "contract Proposal"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1289:19:4"
            },
            "returnParameters": {
              "id": 562,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 559,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 583,
                  "src": "1324:4:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 558,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1324:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 561,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 583,
                  "src": "1330:13:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 560,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1330:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1323:21:4"
            },
            "scope": 584,
            "src": "1273:342:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 585,
        "src": "239:1378:4"
      }
    ],
    "src": "0:1618:4"
  },
  "legacyAST": {
    "absolutePath": "/Users/FinnHarman/Google Drive/Computing Science/Individual Project/Code/ISA/contracts/Regulator.sol",
    "exportedSymbols": {
      "Regulator": [
        584
      ]
    },
    "id": 585,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 495,
        "literals": [
          "solidity",
          ">",
          "0.4",
          ".23",
          "<",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:31:4"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/access/Ownable.sol",
        "file": "openzeppelin-solidity/contracts/access/Ownable.sol",
        "id": 496,
        "nodeType": "ImportDirective",
        "scope": 585,
        "sourceUnit": 738,
        "src": "33:60:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/FinnHarman/Google Drive/Computing Science/Individual Project/Code/ISA/contracts/Proposal.sol",
        "file": "./Proposal.sol",
        "id": 497,
        "nodeType": "ImportDirective",
        "scope": 585,
        "sourceUnit": 494,
        "src": "95:24:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/FinnHarman/Google Drive/Computing Science/Individual Project/Code/ISA/contracts/Verifier.sol",
        "file": "./Verifier.sol",
        "id": 498,
        "nodeType": "ImportDirective",
        "scope": 585,
        "sourceUnit": 612,
        "src": "120:24:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 499,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 737,
              "src": "261:7:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$737",
                "typeString": "contract Ownable"
              }
            },
            "id": 500,
            "nodeType": "InheritanceSpecifier",
            "src": "261:7:4"
          }
        ],
        "contractDependencies": [
          634,
          737
        ],
        "contractKind": "contract",
        "documentation": "@notice A service which regulates the creation and transfer of Income Sharing Agreements",
        "fullyImplemented": true,
        "id": 584,
        "linearizedBaseContracts": [
          584,
          737,
          634
        ],
        "name": "Regulator",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 502,
            "name": "verifier",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 584,
            "src": "274:25:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Verifier_$611",
              "typeString": "contract Verifier"
            },
            "typeName": {
              "contractScope": null,
              "id": 501,
              "name": "Verifier",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 611,
              "src": "274:8:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Verifier_$611",
                "typeString": "contract Verifier"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 506,
            "name": "validIdentites",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 584,
            "src": "303:39:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
              "typeString": "mapping(bytes32 => bool)"
            },
            "typeName": {
              "id": 505,
              "keyType": {
                "id": 503,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "311:7:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "303:24:4",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                "typeString": "mapping(bytes32 => bool)"
              },
              "valueType": {
                "id": 504,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "322:4:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 510,
            "name": "requestProposal",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 509,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 508,
                  "indexed": false,
                  "name": "proposal",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 510,
                  "src": "369:17:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Proposal_$493",
                    "typeString": "contract Proposal"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 507,
                    "name": "Proposal",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 493,
                    "src": "369:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Proposal_$493",
                      "typeString": "contract Proposal"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "368:19:4"
            },
            "src": "347:41:4"
          },
          {
            "body": {
              "id": 519,
              "nodeType": "Block",
              "src": "431:31:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 517,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 515,
                      "name": "verifier",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 502,
                      "src": "437:8:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Verifier_$611",
                        "typeString": "contract Verifier"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 516,
                      "name": "_verifier",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 512,
                      "src": "448:9:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Verifier_$611",
                        "typeString": "contract Verifier"
                      }
                    },
                    "src": "437:20:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Verifier_$611",
                      "typeString": "contract Verifier"
                    }
                  },
                  "id": 518,
                  "nodeType": "ExpressionStatement",
                  "src": "437:20:4"
                }
              ]
            },
            "documentation": null,
            "id": 520,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 513,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 512,
                  "name": "_verifier",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 520,
                  "src": "404:18:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Verifier_$611",
                    "typeString": "contract Verifier"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 511,
                    "name": "Verifier",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 611,
                    "src": "404:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Verifier_$611",
                      "typeString": "contract Verifier"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "403:20:4"
            },
            "returnParameters": {
              "id": 514,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "431:0:4"
            },
            "scope": 584,
            "src": "392:70:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 540,
              "nodeType": "Block",
              "src": "610:74:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 531,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "624:21:4",
                        "subExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 528,
                            "name": "validIdentites",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 506,
                            "src": "625:14:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                              "typeString": "mapping(bytes32 => bool)"
                            }
                          },
                          "id": 530,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 529,
                            "name": "hash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 522,
                            "src": "640:4:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "625:20:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 527,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1011,
                        1012
                      ],
                      "referencedDeclaration": 1011,
                      "src": "616:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 532,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "616:30:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 533,
                  "nodeType": "ExpressionStatement",
                  "src": "616:30:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 538,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 534,
                        "name": "validIdentites",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 506,
                        "src": "652:14:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                          "typeString": "mapping(bytes32 => bool)"
                        }
                      },
                      "id": 536,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 535,
                        "name": "hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 522,
                        "src": "667:4:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "652:20:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 537,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "675:4:4",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "652:27:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 539,
                  "nodeType": "ExpressionStatement",
                  "src": "652:27:4"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "261005f9",
            "id": 541,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 525,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 524,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 688,
                  "src": "600:9:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "600:9:4"
              }
            ],
            "name": "addIdentity",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 523,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 522,
                  "name": "hash",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 541,
                  "src": "579:12:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 521,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "579:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "578:14:4"
            },
            "returnParameters": {
              "id": 526,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "610:0:4"
            },
            "scope": 584,
            "src": "558:126:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 553,
              "nodeType": "Block",
              "src": "934:97:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 550,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 543,
                        "src": "1018:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 548,
                        "name": "verifier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 502,
                        "src": "1000:8:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Verifier_$611",
                          "typeString": "contract Verifier"
                        }
                      },
                      "id": 549,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "verifyTx",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 610,
                      "src": "1000:17:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_bool_$returns$_t_bool_$",
                        "typeString": "function (bool) external returns (bool)"
                      }
                    },
                    "id": 551,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1000:26:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 547,
                  "id": 552,
                  "nodeType": "Return",
                  "src": "993:33:4"
                }
              ]
            },
            "documentation": "@dev Requests linking of address to real world identity via zero knowledge\nproof.\n   * Returns a boolean value indicating whether the operation succeeded.",
            "functionSelector": "be123145",
            "id": 554,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "register",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 544,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 543,
                  "name": "success",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 554,
                  "src": "894:12:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 542,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "894:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "888:22:4"
            },
            "returnParameters": {
              "id": 547,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 546,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 554,
                  "src": "926:4:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 545,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "926:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "925:6:4"
            },
            "scope": 584,
            "src": "871:160:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 582,
              "nodeType": "Block",
              "src": "1345:270:4",
              "statements": [
                {
                  "condition": {
                    "argumentTypes": null,
                    "id": 566,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "1355:21:4",
                    "subExpression": {
                      "argumentTypes": null,
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "expression": {
                          "argumentTypes": null,
                          "id": 563,
                          "name": "proposal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 556,
                          "src": "1356:8:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Proposal_$493",
                            "typeString": "contract Proposal"
                          }
                        },
                        "id": 564,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "bothAgree",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 333,
                        "src": "1356:18:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$__$returns$_t_bool_$",
                          "typeString": "function () view external returns (bool)"
                        }
                      },
                      "id": 565,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1356:20:4",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 580,
                    "nodeType": "Block",
                    "src": "1452:159:4",
                    "statements": [
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 573,
                              "name": "proposal",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 556,
                              "src": "1551:8:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Proposal_$493",
                                "typeString": "contract Proposal"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_Proposal_$493",
                                "typeString": "contract Proposal"
                              }
                            ],
                            "id": 572,
                            "name": "requestProposal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 510,
                            "src": "1535:15:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_contract$_Proposal_$493_$returns$__$",
                              "typeString": "function (contract Proposal)"
                            }
                          },
                          "id": 574,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1535:25:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 575,
                        "nodeType": "EmitStatement",
                        "src": "1530:30:4"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "hexValue": "74727565",
                              "id": 576,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1576:4:4",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "true"
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "50726f706f73616c207375636365737366756c",
                              "id": 577,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1582:21:4",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_e538b145d3f907d7f6c001efc47c2e295d304e81252b274a5144fd2df9f7cb73",
                                "typeString": "literal_string \"Proposal successful\""
                              },
                              "value": "Proposal successful"
                            }
                          ],
                          "id": 578,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1575:29:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_stringliteral_e538b145d3f907d7f6c001efc47c2e295d304e81252b274a5144fd2df9f7cb73_$",
                            "typeString": "tuple(bool,literal_string \"Proposal successful\")"
                          }
                        },
                        "functionReturnParameters": 562,
                        "id": 579,
                        "nodeType": "Return",
                        "src": "1568:36:4"
                      }
                    ]
                  },
                  "id": 581,
                  "nodeType": "IfStatement",
                  "src": "1351:260:4",
                  "trueBody": {
                    "id": 571,
                    "nodeType": "Block",
                    "src": "1378:68:4",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "hexValue": "66616c7365",
                              "id": 567,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1394:5:4",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "426f74682070617274696573206d75737420616772656520746f2070726f706f73616c",
                              "id": 568,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1401:37:4",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_09ca7baf9315f7f28c1faa4f9c9c06a537d896fcb77ce6bc04c76aa64bbd8957",
                                "typeString": "literal_string \"Both parties must agree to proposal\""
                              },
                              "value": "Both parties must agree to proposal"
                            }
                          ],
                          "id": 569,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1393:46:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_stringliteral_09ca7baf9315f7f28c1faa4f9c9c06a537d896fcb77ce6bc04c76aa64bbd8957_$",
                            "typeString": "tuple(bool,literal_string \"Both parties must agree to proposal\")"
                          }
                        },
                        "functionReturnParameters": 562,
                        "id": 570,
                        "nodeType": "Return",
                        "src": "1386:53:4"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": "@dev Requests creation of new ISA. Proposal is compared to whitelist and\nlegal contract emails are sent if valid\n   * Returns a boolean value and message indicating whether the operation\nsucceeded and why.",
            "functionSelector": "27c78c42",
            "id": 583,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "request",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 557,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 556,
                  "name": "proposal",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 583,
                  "src": "1290:17:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Proposal_$493",
                    "typeString": "contract Proposal"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 555,
                    "name": "Proposal",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 493,
                    "src": "1290:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Proposal_$493",
                      "typeString": "contract Proposal"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1289:19:4"
            },
            "returnParameters": {
              "id": 562,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 559,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 583,
                  "src": "1324:4:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 558,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1324:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 561,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 583,
                  "src": "1330:13:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 560,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1330:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1323:21:4"
            },
            "scope": 584,
            "src": "1273:342:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 585,
        "src": "239:1378:4"
      }
    ],
    "src": "0:1618:4"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.1+commit.e6f7d5a4.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        "0xa7e13ea85cfb2c6bce92c3ebe721bbaed610c45fae5f0c16dc6b17fccc00256d": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "contract Proposal",
              "name": "proposal",
              "type": "address"
            }
          ],
          "name": "requestProposal",
          "type": "event"
        }
      },
      "links": {},
      "address": "0x3A352307DA8093e4777d8c4b9B4b1dB381c9dd4E",
      "transactionHash": "0xc91fa63690f8a0a94479deeaa139b4da2b6751d1d23254a4309b26f5b0ff04d9"
    }
  },
  "schemaVersion": "3.2.0",
  "updatedAt": "2020-07-27T20:34:37.000Z",
  "networkType": "ethereum",
  "devdoc": {
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "register(bool)": {
        "details": "Requests linking of address to real world identity via zero knowledge proof.   * Returns a boolean value indicating whether the operation succeeded."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "request(address)": {
        "details": "Requests creation of new ISA. Proposal is compared to whitelist and legal contract emails are sent if valid   * Returns a boolean value and message indicating whether the operation succeeded and why."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {},
    "notice": "A service which regulates the creation and transfer of Income Sharing Agreements"
  }
}